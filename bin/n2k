#!/usr/bin/env escript
%% -*- erlang -*-
%%! -noinput

%% Reads 'raw', 'csv', 'dat' and 'can' files, and converts
%% to 'csv' or pretty text.

%% Usage: n2k [-f csv | pretty] [--src SrcId] [--pgn PGN] [-o <OutFile>]
%%          <InFile>
%% Default outformat is 'pretty'

main(Args) ->
    ScriptName = script_name(),
    code:add_patha(ebin(ScriptName)),

    try
        A = parse_args(Args, #{fmt => pretty}),
        Fmt = maps:get(fmt, A),
        InFName =
            case maps:find(infname, A) of
                {ok, V} ->
                    V;
                error ->
                    throw(no_infile)
            end,
        InFmt =
            case guess_format(InFName) of
                unknown ->
                    throw(unknown_format);
                dat when Fmt == csv ->
                    throw({cannot_convert_dat_to_csv});
                InFmt0 ->
                    InFmt0
            end,
        {CloseF, WriteF} =
            case maps:find(outfname, A) of
                {ok, OutFName} ->
                    {ok, OutFd} =
                        file:open(OutFName,
                                  [write, raw, binary, delayed_write]),
                    {fun() -> file:close(OutFd) end,
                     fun(Bin) -> file:write(OutFd, Bin) end};
                error ->
                    {fun() -> ok end,
                     fun(Bin) -> io:fwrite("~s", [Bin]) end}
            end,
        PrettyF =
            fun(Message) ->
                    Str = n2k:fmt_nmea_message(Message),
                    WriteF(Str)
            end,
        {OutF, OutFInitState} =
            case Fmt of
                csv ->
                    {fun(Frame, _) when element(2, Frame) /= 'service' ->
                             WriteF(n2k_csv:encode_csv(Frame));
                        (_SrvRec, _) ->
                             []
                     end,
                     []};
                pretty when InFmt == dat ->
                    {fun({_Time, 'service', _Data} = SrvRec, _) ->
                             n2k_dat:fmt_service_record(SrvRec);
                        ({Time, Id, Data}, _) ->
                             {_Pri, PGN, _Src, _Dst} = Id,
                             Message = {Time, Id, n2k_pgn:decode(PGN, Data)},
                             PrettyF(Message)
                     end,
                     []};
                pretty ->
                    {fun(Frame, State0) when element(2, Frame) /= 'service' ->
                             case n2k:decode_nmea(Frame, State0) of
                                 {true, Message, State1} ->
                                     PrettyF(Message),
                                     State1;
                                 {false, State1} ->
                                     State1;
                                 {error, Error, State1} ->
                                     io:format(standard_error,
                                               n2k:fmt_error(Error), []),
                                     State1
                             end;
                        (SrvRec, State0) when InFmt == can ->
                             n2k_can:fmt_service_record(SrvRec),
                             State0
                     end,
                     n2k:decode_nmea_init()}
            end,
        {F, FInitState} = mk_filter_fun(A, OutF, OutFInitState),
        try
            case InFmt of
                raw ->
                    n2k_raw:read_raw_file(InFName, F, FInitState);
                csv ->
                    n2k_csv:read_csv_file(InFName, F, FInitState);
                dat ->
                    n2k_dat:read_dat_file(InFName, F, FInitState);
                can ->
                    n2k_can:read_can_file(InFName, F, FInitState)
            end
        after
            CloseF()
        end
    catch
        throw:help ->
            usage();
        _:_Error:_StackTrace ->
            io:format("** ~p\n  ~p\n", [_Error, _StackTrace]),
            usage()
    end.

usage() ->
    io:format("usage: n2k [-f csv | pretty] [--src SrcId] [--pgn PGN]"
              " [-o <OutFile>] <InFile>\n"),
    halt(1).

ebin(ScriptName) ->
    %% The escript is located in .../n2k/bin
    AppDir = filename:dirname(filename:dirname(ScriptName)),
    filename:join(AppDir, "ebin").

script_name() ->
    script_name(escript:script_name()).

script_name([$/|_] = Name0) ->
    case file:read_link(Name0) of
        {ok, [$/|_] = Name} ->
            Name;
        {ok, RelName} ->
            script_name(filename:join(filename:dirname(Name0), RelName));
        _ ->
            %% there may still be symlink components
            {ok, Cwd} = file:get_cwd(),
            ok = file:set_cwd(filename:dirname(Name0)),
            {ok, Dir} = file:get_cwd(),
            ok = file:set_cwd(Cwd),
            filename:join(Dir, filename:basename(Name0))
    end;
script_name(RelName) ->
    script_name(filename:absname(RelName)).


parse_args(["-f", Fmt | T], A) ->
    case Fmt of
        "csv" ->
            parse_args(T, A#{fmt => csv});
        "pretty" ->
            parse_args(T, A#{fmt => pretty});
        _ ->
            throw({unknown_format, Fmt})
    end;
parse_args(["-o", OutFName | T], A) ->
    parse_args(T, A#{outfname => OutFName});
parse_args(["--src", Src | T], A) ->
    parse_args(T, A#{src => list_to_integer(Src)});
parse_args(["--pgn", PGN | T], A) ->
    parse_args(T, A#{pgn => list_to_integer(PGN)});
parse_args(["-h" | _], _A) ->
    throw(help);
parse_args([InFName], A) ->
    A#{infname => InFName};
parse_args([H | _], _A) ->
    throw({unknown_parameter, H});
parse_args([], A) ->
    A.

guess_format(FName) ->
    {ok, Fd} = file:open(FName, [read, raw, binary, read_ahead]),
    try
        case file:read(Fd, 16) of
            {ok, <<_,_,16#ff,16#ff,16#ff,16#ff,
                   $Y,$D,$V,$R,$\s,$v,$0,$4,_,_>>} ->
                dat;
            {ok, <<_,_,_,_,16#ff,16#ff,16#ff,16#ff,
                   $Y,$D,$V,$R,$\s,$v,$0,$5>>} ->
                can;
            _ ->
                file:position(Fd, 0),
                {ok, Line} = file:read_line(Fd),
                case binary:split(Line, <<" ">>, [global,trim_all]) of
                    [_TimeB, <<_DirCh>>, _CanIdB | _] ->
                        raw;
                    _ ->
                        case binary:split(Line, <<",">>, [global,trim_all]) of
                            [_TimeB, _PriB, _PGNB, _SrcB, _DstB, _SzB | _] ->
                                csv;
                            _ ->
                                unknown
                        end
                end
        end
    catch
        _:_Error ->
            io:format("** ~p\n", [_Error]),
            unknown
    after
        file:close(Fd)
    end.

mk_filter_fun(A, OutF, OutFInitState) ->
    case {maps:get(pgn, A, undefined), maps:get(src, A, undefined)} of
        {undefined, undefined} ->
            {OutF, OutFInitState};
        {ReqPGN, ReqSrc} ->
            {fun({_Time, {_Pri, PGN, Src, _}, _} = M, OutState) ->
                     if (ReqPGN == undefined orelse ReqPGN == PGN)
                        andalso
                        (ReqSrc == undefined orelse ReqSrc == Src) ->
                             OutF(M, OutState);
                        true ->
                             OutState
                     end;
                (M, OutState) ->
                     OutF(M, OutState)
             end, OutFInitState}
    end.
